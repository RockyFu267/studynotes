FROM ubuntu:16.04

#RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

RUN sed -i s:archive.ubuntu.com:mirrors.aliyun.com:g /etc/apt/sources.list

RUN apt-get clean && apt-get update && \
	apt-get install -y curl wget telnet vim git openssh-server \
	build-essential python-dev libsasl2-dev libfreetype6-dev \
	lsof netcat-openbsd

######## ssh keys ########
# Add ssh keys, we should find better way to avoid copy keys
# all ssh keys will not checked in gitlab
# it should manually copied to keys folder from master@/disk99/keys
COPY ./keys/authorized_keys /root/.ssh/
COPY ./keys/config /root/.ssh/
# dist_pkgs / dist_pkgs.pub for scp files to jumpbox or cs1
COPY ./keys/dist_pkgs /root/.ssh/
COPY ./keys/dist_pkgs.pub /root/.ssh/
# gitlab for access gitlab.xxxxx.io
#COPY ./keys/gitlab /root/.ssh/
# jenkins for communication between jenkins master and slaves
#COPY ./keys/jenkins /root/.ssh/
RUN chmod -R 600 ~/.ssh/ \
	&& ssh-keyscan github.com >> /root/.ssh/known_hosts

######## Update sshd config ########
RUN sed -i 's/Port 22/Port 22000/' /etc/ssh/sshd_config \
	&& sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config \
	&& sed -i 's/#AuthorizedKeysFile/AuthorizedKeysFile/' /etc/ssh/sshd_config \
	&& mkdir -p /var/run/sshd

######## Add git config ########
RUN git config --global user.email "ci@xxxxx.com" \
	&& git config --global user.name "ci"

######## Add jenkins user to switch user testing ########
RUN adduser --system --group --no-create-home --disabled-password --quiet --shell /bin/bash jenkins

######## Set locales ########
#RUN locale-gen en_US && locale-gen en_US.utf8
#ENV LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8


######## Install 3rd party tool binaries ########
RUN mkdir -p /opt/tools
COPY ./tools/ /opt/tools/
ENV PATH $PATH:/opt/tools

######## Install JDK 1.8 ########
RUN set -ex \
  && wget -q "http://oblhfa32w.bkt.clouddn.com/jdk-8u101-linux-x64.tar.gz" \
  && tar -xvf jdk-8u101-linux-x64.tar.gz
RUN mv jdk1.8.0_101 /usr/local/jdk
ENV PATH /usr/local/jdk/bin:$PATH
ENV JAVA_HOME /usr/local/jdk

EXPOSE 22000

######## Install Maven ########
RUN apt-get update
#install libfuse-dev
RUN apt-get install -y libfuse-dev
# install wget
RUN apt-get install -y wget

# get maven 3.3.9
RUN set -ex \
  && wget -q "http://oblhfa32w.bkt.clouddn.com/apache-maven-3.3.9-bin.tar.gz" \
  && tar -xvf apache-maven-3.3.9-bin.tar.gz
RUN mv apache-maven-3.3.9 /usr/local/maven
ENV PATH /usr/local/maven/bin:$PATH
ENV M2_HOME /usr/local/maven

######## Install go 1.16 ########
ENV GOLANG_VERSION 1.16.1
ENV GOLANG_DOWNLOAD_URL http://7xt77y.com2.z0.glb.clouddn.com/go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_SHA256 3edc22f8332231c3ba8be246f184b736b8d28f06ce24f08168d8ecf052549769

RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
	&& echo "$GOLANG_DOWNLOAD_SHA256  golang.tar.gz" | sha256sum -c - \
	&& tar -C /usr/local -xzf golang.tar.gz \
	&& rm golang.tar.gz

ENV GOROOT /usr/local/go
ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH

RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"

COPY ./entrypoint.sh /

ENTRYPOINT ["/entrypoint.sh"]